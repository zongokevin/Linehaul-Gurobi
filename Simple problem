model=Model(“Dispatch”)
DE={}
D={0:788,1:569,2:991,3:614}
H={0:7.45,1:5.45,2:9.87,3:5.95}
R={0:22.5,1:22.5,2:26,3:24,4:27,5:25.18}
A={0:1,1:0,2:1,3:1,4:1,5:1}
CM=1.5
for i in range(6):
	for j in range(4):
		DE[i,j]=model.addVar(vtype=GRB.BINARY,obj=(D[j]*CM+H[j]*R[i]),name="DE[%d,%d]"%(i,j))

model.update()

#constrainte for driver availibility
for i in range(6):
	model.addConstr(DE[i,0]+DE[i,1]+DE[i,2]+DE[i,3]<=A[i],"Driver%s,availibility"%i)
#constrainte to satisfy each order
for j in range(4):
	model.addConstr(DE[0,j]+DE[1,j]+DE[2,j]+DE[3,j]+DE[4,j]+DE[5,j]==1,"Pro%s, must be done"%j)

model.update()
def printSolution():
	if model.status == GRB.status.OPTIMAL:
		print("\nTotal cost: %d\n\n"%model.objVal)
        	for i in range(6):
			for j in range(4):
				if DE[i,j].x==1:
					print("\nDE[%s,%s]= %s"%(i,j,DE[i,j].x))
		print("\n")
	else:
		print("No solution")

model.ModelSense = 1
model.optimize()
printSolution()

